#!/usr/bin/env bash


## Find true directory this script resides in
__SOURCE__="${BASH_SOURCE[0]}"
while [[ -h "${__SOURCE__}" ]]; do
    __SOURCE__="$(find "${__SOURCE__}" -type l -ls | sed -n 's@^.* -> \(.*\)@\1@p')"
done
__NAME__="${__SOURCE__//*(*\/|.*)/}"
__DIR__="$(cd -P "$(dirname "${__SOURCE__}")" && pwd)"
__AUTHOR__='S0AndS0'
__DESCRIPTION__='Links script to Git aliased command'
__ALIAS_SOURCE_DIR__="${__DIR__}/alias-scripts"
__ALIAS_DESTINATION_DIR__="${HOME}/bin"


set -Ee -o functrace


## Provides: failure
source "${__DIR__}/shared_functions/modules/trap-failure/failure.sh"
trap 'failure "LINENO" "BASH_LINENO" "${BASH_COMMAND}" "${?}"' ERR

## Provides: argument_parser <arg-array-reference> <acceptable-arg-reference>
source "${__DIR__}/shared_functions/modules/argument-parser/argument-parser.sh"

## Provides: __license__ <description> <author>
source "${__DIR__}/shared_functions/license.sh"


__usage__() {
    local _message="${1}"
    cat <<EOF
${__DESCRIPTION__}


Options:
-h    --help
    Prints this message and exits

-l    --license
    Prints copyright for this script and exits

-v    --verbose
    Prints messages about actions

-V    --version
    Prints version for this script and exits

"${_alias_name:-script-name}"
    Name of Git alias, eg. init

Examples:
    git link-alias ${_alias_name:-init}
EOF

    (( "${#_message}" )) && {
        printf >&2 '\n\n## Error: %s\n' "${_message}"
        exit 1
    }
}


__version__() {
    local _version_number
    _version_number="$(git tag --list v* | tail -n1)"
    _version_number="${_version_number:-v0.0.1}"
    _version_number="${_version_number//[^0-9.]/}"

    cat <<EOF
${__NAME__} - ${_version_number}

$( __license__ )

Written by ${__AUTHOR__}
EOF

    return 0
}


## Save passed arguments and acceptable arguments to Bash arrays
# shellcheck disable=SC2034
{
    _passed_args=( "${@:?No arguments provided}" )
    _acceptable_args=(
        '--help|-h:bool'
        '--license|-l:bool'
        '--verbose|-v:bool'
        '--version|-V:bool'
        '--alias-name:print-nil'
    )
}

## Pass arrays by reference/name to the `argument_parser` function
argument_parser '_passed_args' '_acceptable_args'
_exit_status="$?"


# shellcheck disable=SC2154
(( _help )) || (( _exit_status )) && {
    __usage__
    exit "${_exit_status:-0}"
}

# shellcheck disable=SC2154
(( _license )) && {
    printf '%s\n' "${__DESCRIPTION__}"
    __license__
    exit ${_exit_status:-0}
}

# shellcheck disable=SC2154
(( _version )) && {
    __version__
    exit ${_exit_status:-0}
}

# shellcheck disable=SC2154
(( "${#_alias_name}" )) || {
    __usage__ 'No alias script name provided'
}


_script_name="git-${_alias_name}"
_script_source_path="${__ALIAS_SOURCE_DIR__}/${_script_name}"
_script_destination_path="${__ALIAS_DESTINATION_DIR__}/${_script_name}"


[[ -L "${_script_destination_path}" ]] && {
    __usage__ "Link already exists for -> ${_alias_name}"
}


[[ -x "${__ALIAS_SOURCE_DIR__}/${_alias_name}" ]] || {
    __usage__ "No alias script found with name -> ${_alias_name}"
}


(( _verbose )) && {
    printf 'ln -s "%s" "%s"\n' "${_script_source_path}" "${_script_destination_path}"
}
ln -s "${_script_source_path}" "${_script_destination_path}"

